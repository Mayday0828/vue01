{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/',\n  name: 'login',\n  component: () => import('../views/LoginView.vue')\n}, {\n  path: '/element',\n  name: 'Element',\n  component: () => import('../views/Element.vue')\n}, {\n  path: '/index',\n  name: 'index',\n  component: () => import('../views/Manager.vue'),\n  redirect: '/index/home',\n  children: [{\n    path: 'home',\n    name: 'Home',\n    component: () => import('../views/manager/HomeView.vue')\n  }, {\n    path: 'user',\n    name: 'User',\n    component: () => import('../views/manager/User.vue')\n  }, {\n    path: '403',\n    name: 'Auth',\n    component: () => import('../views/Auth.vue')\n  }]\n}, {\n  path: '/register',\n  name: 'register',\n  component: () => import('../views/RegisterView.vue')\n}, {\n  path: '*',\n  name: '404',\n  component: () => import('../views/404.vue')\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  // to 是到达的路由信息\n  // from 是开源的路由信息\n  // next 是帮助我们跳转路由的函数\n  let adminPaths = ['/index/user'];\n  let user = JSON.parse(localStorage.getItem('honey-user') || '{}');\n  if (user.role !== '管理员' && adminPaths.includes(to.path)) {\n    // 如果当前登录的用户不是管理员，然后当前的到达的路径是管理员才有权限访问的路径，那这个时候我就让用户去到一个没有权限的页面，不让他访问实际的页面\n    next('/index/403');\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","use","routes","path","name","component","redirect","children","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","adminPaths","user","JSON","parse","localStorage","getItem","role","includes"],"sources":["D:/java1/2/vue01/vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\n\r\nVue.use(VueRouter)\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    name: 'login',\r\n    component: () => import( '../views/LoginView.vue')\r\n  },\r\n  {\r\n    path: '/element',\r\n    name: 'Element',\r\n    component: () => import( '../views/Element.vue')\r\n  },\r\n  {\r\n    path: '/index',\r\n    name: 'index',\r\n    component: () => import( '../views/Manager.vue'),\r\n    redirect: '/index/home',\r\n    children: [\r\n      { path: 'home', name: 'Home', component: () => import( '../views/manager/HomeView.vue')},\r\n      { path: 'user', name: 'User', component: () => import( '../views/manager/User.vue')},\r\n      { path: '403', name: 'Auth', component: () => import( '../views/Auth.vue')}\r\n    ]\r\n\r\n  },\r\n  {\r\n    path: '/register',\r\n    name: 'register',\r\n    component: () => import( '../views/RegisterView.vue')\r\n  },\r\n  { path: '*', name: '404', component: () => import( '../views/404.vue')},\r\n]\r\n\r\nconst router = new VueRouter({\r\n  mode: 'history',\r\n  base: process.env.BASE_URL,\r\n  routes\r\n})\r\nrouter.beforeEach((to, from, next) => {\r\n  // to 是到达的路由信息\r\n  // from 是开源的路由信息\r\n  // next 是帮助我们跳转路由的函数\r\n  let adminPaths = ['/index/user',]\r\n  let user = JSON.parse(localStorage.getItem('honey-user') || '{}')\r\n\r\n  if (user.role !== '管理员' && adminPaths.includes(to.path)) {\r\n    // 如果当前登录的用户不是管理员，然后当前的到达的路径是管理员才有权限访问的路径，那这个时候我就让用户去到一个没有权限的页面，不让他访问实际的页面\r\n    next('/index/403')\r\n  } else {\r\n    next()\r\n  }\r\n})\r\n\r\nexport default router\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAElCD,GAAG,CAACE,GAAG,CAACD,SAAS,CAAC;AAElB,MAAME,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAE,wBAAwB;AACnD,CAAC,EACD;EACEF,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAE,sBAAsB;AACjD,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAE,sBAAsB,CAAC;EAChDC,QAAQ,EAAE,aAAa;EACvBC,QAAQ,EAAE,CACR;IAAEJ,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAE,+BAA+B;EAAC,CAAC,EACxF;IAAEF,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAE,2BAA2B;EAAC,CAAC,EACpF;IAAEF,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAE,mBAAmB;EAAC,CAAC;AAG/E,CAAC,EACD;EACEF,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAE,2BAA2B;AACtD,CAAC,EACD;EAAEF,IAAI,EAAE,GAAG;EAAEC,IAAI,EAAE,KAAK;EAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAE,kBAAkB;AAAC,CAAC,CACxE;AAED,MAAMG,MAAM,GAAG,IAAIR,SAAS,CAAC;EAC3BS,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC1BX;AACF,CAAC,CAAC;AACFM,MAAM,CAACM,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA;EACA;EACA,IAAIC,UAAU,GAAG,CAAC,aAAa,CAAE;EACjC,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC;EAEjE,IAAIJ,IAAI,CAACK,IAAI,KAAK,KAAK,IAAIN,UAAU,CAACO,QAAQ,CAACV,EAAE,CAACZ,IAAI,CAAC,EAAE;IACvD;IACAc,IAAI,CAAC,YAAY,CAAC;EACpB,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeT,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}